name: Deploy GCME Give

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  test:
    name: Test Applications
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: mydb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install API dependencies
        working-directory: ./api
        run: pnpm install --frozen-lockfile

      - name: Install Web dependencies
        working-directory: ./web
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        working-directory: ./api
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/mydb" > .env
          echo "BETTER_AUTH_SECRET=test_secret" >> .env
          echo "BETTER_AUTH_URL=http://localhost:3001" >> .env
          echo "WEB_URL=http://localhost:3000" >> .env

      - name: Generate Prisma client
        working-directory: ./api
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./api
        run: npx prisma migrate deploy

      - name: Lint API
        working-directory: ./api
        run: pnpm run lint

      - name: Test API
        working-directory: ./api
        run: pnpm run test

      - name: Build API
        working-directory: ./api
        run: pnpm run build

      - name: Lint Web
        working-directory: ./web
        run: pnpm run lint

      - name: Build Web
        working-directory: ./web
        env:
          API_URL: http://localhost:3001
          NEXT_PUBLIC_REDIRECT_URL: /
        run: pnpm run build

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            
            # Navigate to project directory
            cd /root/gcme-give
            
            # Pull latest changes
            git pull origin main
            
            # Run deployment script
            ./deployment/scripts/deploy.sh
            
            # Check application status
            pm2 status
          EOF

      - name: Health Check
        run: |
          # Wait for applications to start
          sleep 30
          
          # Check API health
          curl -f https://api.give.dsethiopia.org/health || exit 1
          
          # Check Web health
          curl -f https://give.dsethiopia.org || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
            echo "🌐 Web: https://give.dsethiopia.org"
            echo "🔗 API: https://api.give.dsethiopia.org"
          else
            echo "❌ Deployment failed!"
          fi
